#include "phReadWrite.h"
#include "phastaIO.h"
#include <string.h>
#include <strings.h>
#include <iostream>
#include <stdio.h>

using namespace std;

// to read parameters from a phasta file (filename)
// parameters correspond to nshg & nvar, i.e., size of field-array
// these parameters are used as reference values 
// (sometimes needed before reading the field-array)
void readParametersFromFile(char *filename,
			    char *fieldName,
			    int &nshg, 
			    int &numVars) {

  // read file (i.e., restart, error etc.)
  // fileDescriptor
  int restart;
  // format of the file
  char* iformat = "binary";

  openfile_( filename, "read",  &restart );

  // contains: nshg,numVars,lstep
  int iarray[4];
  // don't know what is this for
  // think it loops over token `<>' 
  // inside phastaIO.cc in readHeader(...)
  int isize = 3;
  
  readheader_( &restart, fieldName, iarray,
	       &isize, "double", iformat );

  // nshg * numVars
  nshg=iarray[0];
  numVars=iarray[1];

  closefile_(&restart, "read");
}

// to read array from a phasta file (filename)
// memory is allocated HERE for 'valueArray'
// `fieldName' tells which block to read like solution, error etc.
void readArrayFromFile( char *filename,
			char *fieldName,
			double *&valueArray) {
  // read file (i.e., restart, error etc.)
  // fileDescriptor
  int restart;
  // format of the file
  char* iformat = "binary";

  openfile_( filename, "read",  &restart );

  // contains: nshg,numVars,lstep
  int iarray[4];
  // don't know what is this for
  // think it loops over token `<>' 
  // inside phastaIO.cc in readHeader(...)
  int isize = 3;
  
  readheader_( &restart, fieldName, iarray,
	       &isize, "double", iformat );

  // nshg * numVars
  int nshg=iarray[0];
  int numVars=iarray[1];
  isize = iarray[0]*iarray[1];

  double* q = new double[nshg*numVars];

  readdatablock_( &restart, fieldName, q, &isize,
		  "double" , iformat );

  valueArray = new double[nshg*numVars];

  for(int i = 0; i< nshg; i++){
    for( int j=0; j< numVars; j++){
      valueArray[i*numVars+j] = q[j*nshg+i];
    }
  }
  
  delete [] q;

  closefile_(&restart, "read");
}

// to write array to a phasta file (filename)
// NOTE: array should be transposed!!!
// `fieldName' tells in which block to write like solution, error etc.
// `outputFormat' tells in which format to write, i.e., binary/ascii
// `mode' : "write", "append" etc.
void writeArrayToFile( char *filename,
		       char *fieldName,
		       char *outputFormat,
		       char *mode,
		       int nshg,
		       int numVars,
		       int stepNumber,
		       double *valueArray) {
 
  int restart;
  char fname[256];
  int iarray[10];
  int size, nitems;
  
  openfile_( filename, mode, &restart );

  if(!strcmp(mode,"write")) {
    writestring_( &restart,"# PHASTA Input File Version 2.0\n");
    writestring_( &restart, "# Byte Order Magic Number : 362436 \n");
    
    sprintf(fname,"# Output generated by phParAdapt version: \n");
    writestring_( &restart, fname );
    
    time_t timenow = time ( &timenow);
    sprintf(fname,"# %s\n", ctime( &timenow ));
    writestring_( &restart, fname );
    
  
    size = 1;
    nitems = 1;
    iarray[0] = 1;
    int magic_number = 362436;
    int* mptr = &magic_number;
    
    writeheader_( &restart, "byteorder magic number ",
		  (void*)iarray, &nitems, &size, "integer", outputFormat );
    
    writedatablock_( &restart, "byteorder magic number ",
		     (void*)mptr, &nitems, "integer", outputFormat );          
    
    bzero( (void*)fname, 256 );
    sprintf(fname,"number of modes : < 0 > %d\n", nshg);
    writestring_( &restart, fname );
    
    bzero( (void*)fname, 256 );
    sprintf(fname,"number of variables : < 0 > %d\n", numVars);
    writestring_( &restart, fname );
  }

  size =  nshg*numVars;
  nitems = 3; // length of array
  iarray[0] = nshg;
  iarray[1] = numVars;
  iarray[2] = stepNumber;

  writeheader_( &restart, fieldName,
		( void* )iarray, &nitems, &size,"double", outputFormat );

  nitems = nshg*numVars; // length of array
  writedatablock_( &restart, fieldName,
		   ( void* )(valueArray), &nitems, "double", outputFormat );

  closefile_( &restart, mode);
}
